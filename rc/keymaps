
" Comma get some... sorry.
let mapleader = ','
let maplocalleader = '\'
noremap ; :

" Shortcut to vimrc and gvimrc
nnoremap <leader>E :CtrlP ~/.vim<CR>
nnoremap <leader>\ :CtrlP ~/.dotfiles<CR>

" Trigger to preserve indentation on pastes
set pastetoggle=<F12>
" Easier than escape. Pinnacle of laziness.
imap jk <ESC>
" Turn off search highlighting
noremap <silent> <leader>? :nohlsearch<CR>

nnoremap <leader>h :<C-u>h 

" Navigation {{{
    " Normalize all the navigation keys to move by row/col despite any wrapped text
    noremap j gj
    noremap k gk
    " % matchit shortcut, but only in normal mode!
    nmap <Tab> %
    " Easier fold toggle
    nnoremap <Space> 5j
    vnoremap <Space> 5j
    nnoremap <Backspace> 5k
    vnoremap <Backspace> 5k
" }}}

" Editing {{{
    nnoremap <C-b> <C-^>
    " Insert-mode navigation
    " Go to end of line
    inoremap <C-e> <Esc>A
    " Go to start of line
    inoremap <C-a> <Esc>I

    " Make Y act consistant with C and D
    nnoremap Y y$

    " Don't leave visual mode after indenting
    vnoremap < <gv
    vnoremap > >gv

    " Textmate-like CMD+Enter (O in insert mode)
    inoremap <S-CR> <C-O>o
    inoremap <C-S-CR> <C-O>O

    " Enabling repeat in visual mode
    vmap . :normal .<CR>
" }}}

" Buffers {{{
    " Change CWD to current file's directory
    nnoremap <leader>cd :cd %:p:h<cr>:pwd<cr>

    " Next/prev buffer
    nnoremap ]b :<C-u>bnext<CR>
    nnoremap [b :<C-u>bprevious<CR>
" }}}

" Command {{{
    " Annoying command mistakes <https://github.com/spf13/spf13-vim>
    com! -bang -nargs=* -complete=file E e<bang> <args>
    com! -bang -nargs=* -complete=file W w<bang> <args>
    com! -bang -nargs=* -complete=file Wq wq<bang> <args>
    com! -bang -nargs=* -complete=file WQ wq<bang> <args>
    com! -bang Wa wa<bang>
    com! -bang WA wa<bang>
    com! -bang Q q<bang>
    com! -bang QA qa<bang>
    com! -bang Qa qa<bang>
    " Forget to sudo?
    com! WW w !sudo tree % >/dev/null

    " Shortcuts
    cnoremap ;/ <C-R>=expand('%:p:h').'/'<CR>
    cnoremap ;; <C-R>=expand("%:t")<CR>
    cnoremap ;. <C-R>=expand("%:p:r")<CR>

    " Mimic shortcuts in the terminal
    cnoremap <C-a> <Home>
    cnoremap <C-e> <End>
" }}}

" External Tools {{{
    " Send cwd to tmux
    nnoremap <leader>t. :<C-u>call VimuxRunCommand("cd <C-r>=expand("%:p:h")<CR>")<CR>
    nnoremap <leader>t/ :<C-u>call VimuxRunCommand("cd <C-r>=getcwd()<CR>")<CR>
    nnoremap <leader>ts :<C-u>call VimuxRunCommand("tmux split-window")<CR>
    nnoremap <leader>tv :<C-u>call VimuxRunCommand("tmux split-window -h")<CR>
    nnoremap <leader>tc :<C-u>call VimuxRunCommand("tmux new-window")<CR>

    com! -nargs=* T call VimuxRunCommand(<q-args>)
    cabbrev t :<C-u>T
" }}}

" Plugins {{{
    " bufkill
    nnoremap zx :Bdelete<CR>

    " CtrlP
    let g:ctrlp_map = ''
    " Only open CtrlP if the cwd ISN'T $HOME
    nnoremap <silent><expr> <leader>/ getcwd() != $HOME ? ":<C-u>CtrlPCurWD<CR>" : ":<C-u>echoe 'Cannot open CtrlP in HOME'<CR>"
    nnoremap <silent> <leader>. :CtrlPCurFile<CR>
    nnoremap <silent> <leader>, :CtrlPBuffer<CR>
    nnoremap <silent> <leader>; :CtrlPFunky<CR>
    nnoremap <silent> <leader>m :CtrlPMRU<CR>
    nnoremap <silent> <leader>M :CtrlPModified<CR>
    nnoremap <silent> <leader>] :CtrlPBufTag<CR>
    nnoremap <silent> <leader>} :CtrlPBufTagAll<CR>

    " NERDTree
    map <localleader>\ :NERDTreeCWD<CR>
    map <localleader>. :NERDTreeFind<CR>

    " Tabularize
    nmap <leader>= :Tabularize /
    vmap <leader>= :Tabularize /

    " UltiSnips
    let g:UltiSnipsExpandTrigger = "<Tab>"
    let g:UltiSnipsJumpForwardTrigger = "<Tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<S-Tab>"
    " Ignore the default snippets so I (and others) can define their own
    let g:UltiSnipsSnippetDirectories = ["snips"]

    " Emmet
    imap <expr> <C-CR> emmet#expandAbbrIntelligent("\<tab>")

    " Sneak
    "replace 'f' with 1-char Sneak
    nmap f <Plug>Sneak_f
    nmap F <Plug>Sneak_F
    xmap f <Plug>Sneak_f
    xmap F <Plug>Sneak_F
    omap f <Plug>Sneak_f
    omap F <Plug>Sneak_F
    "replace 't' with 1-char Sneak
    nmap t <Plug>Sneak_t
    nmap T <Plug>Sneak_T
    xmap t <Plug>Sneak_t
    xmap T <Plug>Sneak_T
    omap t <Plug>Sneak_t
    omap T <Plug>Sneak_T

    " YCM
    map g] :YcmCompleter GoToDefinitionElseDeclaration<CR>
    let g:ycm_key_list_select_completion = ['<C-j>', '<Down>']
    let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']

    " vim-switch
    nnoremap ! :Switch<CR>
" }}}

" vim:set ft=vim:
