call plug#begin('~/.vim/bundle')

" Behavior {{{
    " Sane per-buffer PWD settings
    Plug 'airblade/vim-rooter'
        let g:rooter_change_directory_for_non_project_files = 1
        let g:rooter_use_lcd = 1
    " Clean way to close buffers without altering window layout
    Plug 'moll/vim-bbye'
    " Toggling maximizing of a buffer
    Plug 'szw/vim-maximizer'
        let g:maximizer_set_default_mapping = 0
        nnoremap <silent> <C-w>o :<C-u>MaximizerToggle!<CR>
    " Extended visual mode commands, substitutes and searches
    Plug 'vis'
    " Communicating with Tmux
    Plug 'christoomey/vim-tmux-navigator'
    Plug 'benmills/vimux'
    " Offers some plugins better compatibility with repeat ('.')
    Plug 'tpope/vim-repeat'
" }}}

" File search {{{
    " More powerful file searching
    if executable('ag')
        Plug 'rking/ag.vim'
    elseif executable('ack')
        Plug 'mileszs/ack.vim'
    endif
    " Netrw improvements
    Plug 'scrooloose/nerdtree'
        let NERDTreeMinimalUI = 1
        let NERDTreeChDirMode = 2
        let NERDTreeIgnore = ['\~$', '\.swo$', '\.swp$', '\.git$', '\.hg', '\.svn', '\.bzr', '\.settings', '\.project', '\.DS_Store']
        let NERDTreeShowHidden = 1
    " Command-T, Peepopen or Goto-anything, but for vim, written in VimL
    Plug 'kien/ctrlp.vim'
    " Ctrlp extension for jumping to functions
    Plug 'tacahiroy/ctrlp-funky'
    " Ctrlp extension for listing git modified files
    Plug 'jasoncodes/ctrlp-modified.vim'
        let g:ctrlp_extensions = ['tag', 'buffertag', 'funky']
        " let g:ctrlp_max_height = 10
        let g:ctrlp_cache_dir = "~/.vim/tmp/ctrlp"
        let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.(git|hg|svn|settings)$|tmp$',
            \ 'file': '\.(exe|so|dll|sass-cache|classpaths|project|cache|jpg|png|gif|swf)$'
        \ }
        let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
        let g:ctrlp_match_window = 'bottom,order:btt,min:10,max:10,results:10'
    " Smarter buffer/tab navigation
    Plug 'szw/vim-ctrlspace'
        let g:ctrlspace_use_tabline = 1
" }}}

" Editing {{{
    " 2-char search motions
    Plug 'justinmk/vim-sneak'
        let g:sneak#s_next = 1
    " Auto-closes delimiters like (),{},[],etc.
    Plug 'Raimondi/delimitMate'
        let g:delimitMate_expand_cr = 1
        let g:delimitMate_expand_space = 1
    " HTML & CSS emmet goodness; Zen coding's successor
    Plug 'mattn/emmet-vim'
    " For aligning text
    Plug 'godlygeek/tabular'
    " Comment out code with native comment syntax
    Plug 'tomtom/tcomment_vim'
        let g:tcomment_types = {'blade': '{-- %s --}', 'twig': '{# %s #}'}
    " Auto-place code blocks for languages like ruby or viml
    Plug 'tpope/vim-endwise'
    " Easy changing and insertion of surrounding delimiters (e.g. quotes,
    " parenthesis, etc.)
    Plug 'tpope/vim-surround'
    " One-key switching between true/false, yes/no, etc
    Plug 'AndrewRadev/switch.vim'
    " Snippets system
    if has("python")
        Plug 'SirVer/ultisnips'
        Plug 'hlissner/vim-ultisnips-snippets'
    endif
" }}}

" Remote/external resources {{{
    " Visual git diffs in the gutter
    Plug 'airblade/vim-gitgutter'
        let g:gitgutter_eager = 0
    " 'a Git wrapper so awesome, it should be illegal'
    Plug 'tpope/vim-fugitive'
    " Color picker pop-up
    Plug 'PickAColor.vim'
" }

" Programming {{{
    if !g:is_ssh
        if has("python")
            " let g:ycm_autoclose_preview_window_after_insertion = 1
            let g:ycm_confirm_extra_conf = 1
            " let g:ycm_register_as_syntastic_checker = 1
            " let g:ycm_seed_identifiers_with_syntax = 0
            " let g:ycm_add_preview_to_completeopt = 1
            let g:ycm_global_ycm_extra_conf = "~/.ycm_extra_conf.py"
            let g:ycm_auto_trigger = 0
            let g:ycm_confirm_extra_conf = 0
            let g:ycm_path_to_python_interpreter = '/usr/bin/python'
            Plug 'Valloric/YouCompleteMe', {'do': './install.py'}
        endif
        " Syntax checkers for a multitude of languages
        Plug 'scrooloose/syntastic'
            let g:syntastic_auto_loc_list=0
            " let g:syntastic_quiet_messages={'level': 'warnings'}
            let g:syntastic_phpcs_disable=1
            let g:syntastic_echo_current_error=1
            let g:syntastic_enable_balloons = 0

            let g:syntastic_error_symbol = '►'
            let g:syntastic_warning_symbol = '►'

            let g:syntastic_loc_list_height = 5
            let g:syntastic_mode_map = {'mode': 'active', 'active_filetypes': [], 'passive_filetypes': ['html']}
    endif

    " Running code inline for testing purposes
    Plug 'notalex/vim-run-live'
" }}}

" Syntax {{{
    " HTML
    Plug 'othree/html5.vim'
    " CSS/SCSS/LESS
    Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
    " PHP
    Plug 'StanAngeloff/php.vim', { 'for': ['php', 'blade']}
    Plug '2072/PHP-Indenting-for-VIm', { 'for': 'php' }
    " Rust
    Plug 'rust-lang/rust.vim', { 'for': 'rust' }
    " Python
    Plug 'python_match.vim', { 'for': 'python' }
    " Javascript/Node
    Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
    Plug 'marijnh/tern_for_vim', { 'for': 'javascript', 'do': 'npm install' }
    " C/C++
    Plug 'octol/vim-cpp-enhanced-highlight', { 'for': 'cpp' }
    " Other
    Plug 'tpope/vim-markdown', { 'for': 'markdown' }
" }}}

" Add plugins to &runtimepath
call plug#end()

" vim:set ft=vim:
