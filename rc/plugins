
" File search {{{
    " More powerful file searching
    if executable('ag')
        NeoBundle 'rking/ag.vim'
    elseif executable('ack')
        NeoBundle 'mileszs/ack.vim'
    endif
    " Keybindings for navigating between vim & tmux
    NeoBundle 'christoomey/vim-tmux-navigator'
    " Netrw improvements
    NeoBundle 'scrooloose/nerdtree'
        let NERDTreeMinimalUI = 1
        let NERDTreeChDirMode = 2
        let NERDTreeIgnore = ['\~$', '\.swo$', '\.swp$', '\.git$', '\.hg', '\.svn', '\.bzr', '\.settings', '\.project', '\.DS_Store']
        let NERDTreeShowHidden = 1
    " Command-T, Peepopen or Goto-anything, but for vim, written in VimL
    NeoBundle 'kien/ctrlp.vim'
    " Ctrlp extension for jumping to functions
    NeoBundle 'tacahiroy/ctrlp-funky'
    " Ctrlp extension for listing git modified files
    NeoBundle 'jasoncodes/ctrlp-modified.vim'
        let g:ctrlp_extensions = ['tag', 'buffertag', 'funky']
        " let g:ctrlp_max_height = 10
        let g:ctrlp_cache_dir = "~/.vim/tmp/ctrlp"
        let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.(git|hg|svn|settings)$|tmp$',
            \ 'file': '\.(exe|so|dll|sass-cache|classpaths|project|cache|jpg|png|gif|swf)$'
        \ }
        let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
        let g:ctrlp_match_window = 'bottom,order:btt,min:10,max:10,results:10'
    " Smarter buffer/tab navigation
    NeoBundle 'szw/vim-ctrlspace'
        let g:ctrlspace_use_tabline = 1
" }}}

" Editing {{{
    " 2-char search motions
    NeoBundle 'justinmk/vim-sneak'
        let g:sneak#s_next = 1
    " Extended visual mode commands, substitutes and searches
    NeoBundle 'vis'
    " Auto-closes delimiters like (),{},[],etc.
    NeoBundle 'Raimondi/delimitMate'
        let g:delimitMate_expand_cr = 1
        let g:delimitMate_expand_space = 1
    " HTML & CSS emmet goodness; Zen coding's successor
    NeoBundle 'mattn/emmet-vim'
    " Clean way to close buffers without altering window layout
    " NeoBundle 'mattdbridges/bufkill.vim'
    NeoBundle 'moll/vim-bbye'
    " For aligning text
    NeoBundle 'godlygeek/tabular'
    " Comment out code with native comment syntax
    NeoBundle 'tomtom/tcomment_vim'
        let g:tcomment_types = {'blade': '{-- %s --}', 'twig': '{# %s #}'}
    " Auto-place code blocks for languages like ruby or viml
    NeoBundle 'tpope/vim-endwise'
    " Offers some plugins better compatibility with repeat ('.')
    NeoBundle 'tpope/vim-repeat'
    " Easy changing and insertion of surrounding delimiters (e.g. quotes,
    " parenthesis, etc.)
    NeoBundle 'tpope/vim-surround'
    " One-key switching between true/false, yes/no, etc
    NeoBundle 'AndrewRadev/switch.vim'
    " Snippets system
    if has("python")
        NeoBundle 'SirVer/ultisnips'
        NeoBundle 'hlissner/vim-ultisnips-snippets'
    endif
" }}}

" Remote resources {{{
    " Visual git diffs in the gutter
    NeoBundle 'airblade/vim-gitgutter'
        let g:gitgutter_eager = 0
    " 'a Git wrapper so awesome, it should be illegal'
    NeoBundle 'tpope/vim-fugitive'
" }

" Programming {{{
    if !g:is_ssh
        " YCM's trouble to get working across systems, so let's
        " just leave it to the systems running (mac|g)vim
        if has("gui_running")
            " Awesome autocompletion
            NeoBundle 'Valloric/YouCompleteMe', {'build': {
                        \ 'mac': './install.sh --clang-completer --system-libclang',
                        \ 'unix': './install.sh --clang-completer' }}
                " let g:ycm_autoclose_preview_window_after_insertion = 1
                let g:ycm_confirm_extra_conf = 1
                " let g:ycm_register_as_syntastic_checker = 1
                " let g:ycm_seed_identifiers_with_syntax = 0
                " let g:ycm_add_preview_to_completeopt = 1
                let g:ycm_global_ycm_extra_conf = "~/.ycm_extra_conf.py"
                " let g:ycm_auto_trigger = 0
                let g:ycm_confirm_extra_conf = 0
        endif
        " Syntax checkers for a multitude of languages
        NeoBundle 'scrooloose/syntastic'
            let g:syntastic_auto_loc_list=0
            " let g:syntastic_quiet_messages={'level': 'warnings'}
            let g:syntastic_phpcs_disable=1
            let g:syntastic_echo_current_error=1
            let g:syntastic_enable_balloons = 0

            let g:syntastic_error_symbol = '►'
            let g:syntastic_warning_symbol = '►'

            let g:syntastic_loc_list_height = 5
            let g:syntastic_mode_map = {'mode': 'active', 'active_filetypes': [], 'passive_filetypes': ['html']}
    endif

    " Running code inline for testing purposes
    NeoBundle 'notalex/vim-run-live'
" }}}

" External Tools {{{
    " Color picker pop-up
    NeoBundle 'PickAColor.vim'
" }}}

" Syntax {{{
    " HTML
    NeoBundle 'othree/html5.vim'
    " CSS/SCSS/LESS
    NeoBundle 'cakebaker/scss-syntax.vim'
    " PHP
    NeoBundleLazy 'StanAngeloff/php.vim',       {'autoload': {'filetypes': ['php', 'blade']}}
    NeoBundleLazy '2072/PHP-Indenting-for-VIm', {'autoload': {'filetypes': ['php']}}
    " NeoBundleLazy 'stephpy/vim-phpdoc',         {'autoload': {'filetypes': ['php']}}
    " Rust
    NeoBundleLazy 'rust-lang/rust.vim',         {'autoload': {'filetypes': ['rust']}}
    " Python
    NeoBundleLazy 'python_match.vim',           {'autoload': {'filetypes': ['python']}}
    " Javascript/Node
    NeoBundleLazy 'pangloss/vim-javascript',    {'autoload': {'filetypes': ['javascript']}}
    " NeoBundleLazy 'moll/vim-node',                {'autoload': {'filetypes': ['javascript']}}
    NeoBundleLazy 'marijnh/tern_for_vim',       {'autoload': {'filetypes': ['javascript']}, 'build': {'mac' : 'npm install'}}
    " C/C++
    NeoBundle 'octol/vim-cpp-enhanced-highlight'
    " Other
    NeoBundle 'tpope/vim-markdown'
" }}}

" NeoBundleCheck
filetype indent plugin on
call neobundle#end()

" vim:set ft=vim:
