
" Appearance {{{
    " Pretty indent indicators
    NeoBundle 'Yggdroot/indentLine'
        let g:indentLine_color_gui = '#4a514f'
" }}}

" File search {{{
    NeoBundle 'majutsushi/tagbar'

    " More powerful file searching
    if executable('ag')
        NeoBundle 'rking/ag.vim'
    elseif executable('ack')
        NeoBundle 'mileszs/ack.vim'
    endif

    " Project-wide search and replace
    NeoBundle 'EasyGrep'

    " A filetree navigator replacement for netrw
    NeoBundle 'scrooloose/nerdtree'
        let NERDTreeHijackNetrw=1
        let NERDTreeMinimalUI = 1
        let NERDTreeChDirMode = 1
        let NERDTreeBookmarksFile = "$HOME/.vim/tmp/NERDtreeBookmarks"
        let NERDTreeIgnore = ['\~$', '\.swo$', '\.swp$', '\.git$', '\.hg', '\.svn', '\.bzr', '\.settings', '\.project', '\.DS_Store']
        let NERDTreeShowHidden = 1
        let NERDTreeAutoDeleteBuffer = 1

    if !g:is_ssh
        " Command-T, Peepopen or Goto-anything, but for vim, written in VimL
        NeoBundle 'kien/ctrlp.vim'
        " Ctrlp extension for jumping to functions
        NeoBundle 'tacahiroy/ctrlp-funky'
        " Ctrlp extension for listing git modified files
        NeoBundle 'jasoncodes/ctrlp-modified.vim'
            let g:ctrlp_extensions = ['tag', 'buffertag', 'line', 'funky', 'tag']
            let g:ctrlp_max_height = 15
            let g:ctrlp_cache_dir = "~/.vim/tmp/ctrlp"
            let g:ctrlp_working_path_mode = 0
            let g:ctrlp_custom_ignore = {
                \ 'dir':  '\.(git|hg|svn|settings)$|tmp$',
                \ 'file': '\.(exe|so|dll|sass-cache|classpaths|project|cache|jpg|png|gif|swf)$'
            \ }
            let g:ctrlp_user_command = {
                \ 'types': [
                \   ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                \   ['.hg', 'hg --cwd %s locate -I']
                \ ],
                \ 'fallback': 'ag %s -l --nocolor -g ""'
            \ }
    endif
" }}}

" Editing {{{
    " Improved % and hopping delimiters (can now be 1+ character)
    NeoBundle 'matchit.zip'

    " Extended visual mode commands, substitutes and searches
    NeoBundle 'vis'

    " Auto-closes delimiters like (),{},[],etc.
    NeoBundle 'Raimondi/delimitMate'
        let g:delimitMate_expand_cr = 1
        let g:delimitMate_expand_space = 1

    " HTML & CSS emmet goodness; Zen coding's successor
    NeoBundle 'mattn/emmet-vim'

    " Clean way to close buffers without altering window layout
    NeoBundle 'mattdbridges/bufkill.vim'

    " For aligning text
    NeoBundle 'godlygeek/tabular'

    " Comment out code with native comment syntax
    NeoBundle 'tomtom/tcomment_vim'
        let g:tcomment_types = {}
        let g:tcomment_types['blade'] = '{-- %s --}'
        let g:tcomment_types['twig'] = '{# %s #}'

    " Auto-place code blocks for languages like ruby or viml
    NeoBundle 'tpope/vim-endwise'

    " Offers some plugins better compatibility with repeat ('.') 
    NeoBundle 'tpope/vim-repeat'

    " Easy changing and insertion of surrounding delimiters (e.g. quotes,
    " parenthesis, etc.)
    NeoBundle 'tpope/vim-surround'

    "
    NeoBundleLazy 'dansomething/vim-eclim', {'autoload': {'filetypes': ['java']}}
        let g:EclimCompletionMethod = 'omnifunc'

    " Snippets system
    if has("python")
        NeoBundle 'SirVer/ultisnips'
            " Ignore the default snippets so I (and others) can define their own
            let g:UltiSnipsSnippetDirectories = ["snips"]

        " My snippets
        NeoBundle 'hlissner/vim-ultisnips-snippets'
    endif

    NeoBundle 'AndrewRadev/switch.vim'
    " NeoBundle 'AndrewRadev/sideways.vim'

    NeoBundle 'guns/vim-sexp'
    NeoBundle 'tpope/vim-sexp-mappings-for-regular-people'
" }}}

" Remote resources {{{
    " Visual git diffs in the gutter
    NeoBundle 'airblade/vim-gitgutter'
        let g:gitgutter_eager = 0

    " 'a Git wrapper so awesome, it should be illegal'
    NeoBundle 'tpope/vim-fugitive'

    " Async compiler plugins
    NeoBundle 'tpope/vim-dispatch'

    " Dash.app lookups
    NeoBundle 'rizzatti/funcoo.vim'
    NeoBundle 'rizzatti/dash.vim'
" }

" Programming {{{
    if !g:is_ssh
        " YCM's trouble to get working across systems, so let's
        " just leave it to the systems running macvim.
        if has("gui_running")
            " Awesome autocompletion
            NeoBundle 'Valloric/YouCompleteMe', {'build': {
                        \ 'mac': './install.sh --clang-completer',
                        \ 'unix': './install.sh --clang-completer' }}
                let g:ycm_autoclose_preview_window_after_insertion = 1
                let g:ycm_confirm_extra_conf = 1
                let g:ycm_register_as_syntastic_checker = 0
                let g:ycm_seed_identifiers_with_syntax = 1
                let g:ycm_add_preview_to_completeopt = 1
                let g:ycm_global_ycm_extra_conf = "~/.ycm_extra_conf.py"
                let g:ycm_filepath_completion_use_working_dir = 1
        endif

        " Syntax checkers for a multitude of languages
        NeoBundle 'scrooloose/syntastic'
            let g:syntastic_auto_loc_list=0
            " let g:syntastic_quiet_messages={'level': 'warnings'}
            let g:syntastic_phpcs_disable=1
            let g:syntastic_echo_current_error=1
            let g:syntastic_enable_balloons = 0

            let g:syntastic_error_symbol = '►'
            let g:syntastic_warning_symbol = '►'

            let g:syntastic_loc_list_height = 5
            let g:syntastic_mode_map = {'mode': 'active', 'active_filetypes': [], 'passive_filetypes': ['html']}
    endif

    " Running code inline for testing purposes
    NeoBundle 'notalex/vim-run-live'

    " Previewing markdown, rdoc, textile and html files in the browser
    NeoBundleLazy 'spf13/vim-preview', {'autoload': {'filetypes': ['markdown', 'rdoc', 'textile', 'html', 'rst', 'ronn']}}
" }}}

" External Tools {{{
    " Color picker pop-up
    NeoBundle 'PickAColor.vim'

    " Communication with tmux
    NeoBundle 'jgdavey/tslime.vim'
" }}}

" Syntax {{{
    " HTML
    NeoBundle 'othree/html5.vim'

    " CSS/SCSS/LESS
    NeoBundle 'cakebaker/scss-syntax.vim'

    " PHP
    NeoBundleLazy 'StanAngeloff/php.vim',       {'autoload': {'filetypes': ['php', 'blade']}}
    NeoBundleLazy '2072/PHP-Indenting-for-VIm', {'autoload': {'filetypes': ['php']}}
    NeoBundleLazy 'shawncplus/phpcomplete.vim', {'autoload': {'filetypes': ['php', 'blade']}}
    NeoBundleLazy 'stephpy/vim-phpdoc',         {'autoload': {'filetypes': ['php']}}

    " Python
    NeoBundleLazy 'indentpython.vim--nianyang', {'autoload': {'filetypes': ['python']}}
    NeoBundleLazy 'python_match.vim',           {'autoload': {'filetypes': ['python']}}

    " Javascript/Node
    NeoBundleLazy 'jelera/vim-javascript-syntax', {'autoload': {'filetypes': ['javascript']}}
    NeoBundleLazy 'moll/vim-node',                {'autoload': {'filetypes': ['javascript']}}
    NeoBundleLazy 'marijnh/tern_for_vim',         {'autoload': {'filetypes': ['javascript']}, 'build': {'mac' : 'npm install'}}

    " C/C++
    NeoBundle 'octol/vim-cpp-enhanced-highlight'
    NeoBundle 'kana/vim-altr'
        call altr#define('scss/%.scss', 'css/%.css')

    " Haxe
    NeoBundle 'jdonaldson/vaxe'

    " Other
    NeoBundle 'spf13/vim-markdown'
    NeoBundle 'digitaltoad/vim-jade'
    NeoBundle 'rodjek/vim-puppet'
" }}}

NeoBundleCheck
filetype indent plugin on

" vim:set ft=vim:
