
" Plugins {
    NeoBundle 'Shougo/vimproc', { 'build' : {
                \     'windows' : 'make -f make_mingw32.mak',
                \     'cygwin' : 'make -f make_cygwin.mak',
                \     'mac' : 'make -f make_mac.mak',
                \     'unix' : 'make -f make_unix.mak' }, }

    " Appearance {
        " A personal favorite colorscheme :3
        NeoBundle 'tomasr/molokai'
        " A nicer status line that isn't as heavy as powerline
        NeoBundle 'bling/vim-airline'
        NeoBundle 'zhaocai/linepower.vim'
        NeoBundle 'bling/vim-bufferline'
        " Pretty indent indicators
        NeoBundle 'nathanaelkane/vim-indent-guides'
    " }
    " File search {
        " More powerful file searching
        if executable('ag')
            NeoBundle 'rking/ag.vim'
        elseif executable('ack')
            NeoBundle 'mileszs/ack.vim'
        endif
        " A filetree navigator replacement for netrw
        NeoBundle 'scrooloose/nerdtree'

        " ...
        " NeoBundleLazy 'Shougo/unite.vim', {'autoload':{'commands':'Unite', 'insert': 1}} 
        " NeoBundleLazy 'Shougo/unite-outline', {'autoload':{'unite_sources':'outline'}} 

        " Command-T, Peepopen or Goto-anything, but for vim, written in VimL
        NeoBundle 'kien/ctrlp.vim'
        " Ctrlp extension for jumping to functions
        NeoBundle 'tacahiroy/ctrlp-funky'
        " Ctrlp extension for listing git modified files
        NeoBundle 'jasoncodes/ctrlp-modified.vim'
    " }
    " Editing {
        " Visual git diffs in the gutter
        NeoBundle 'airblade/vim-gitgutter'
        " Use tab for completion (works fine with ultisnip)
        " NeoBundle 'ervandew/supertab'
        " Improved % and hopping delimiters (can now be 1+ character)
        NeoBundle 'matchit.zip'
        " Auto-closes delimiters like (),{},[],etc.
        NeoBundle 'Raimondi/delimitMate'
        " Clean way to close buffers without altering window layout
        NeoBundle 'bufkill.vim'
        " For aligning text
        NeoBundle 'godlygeek/tabular'
        " Comment out code with native comment syntax
        NeoBundle 'tomtom/tcomment_vim'
        " Auto-place code blocks for languages like ruby or viml
        NeoBundle 'tpope/vim-endwise'
        " Offers some plugins better compatibility with repeat ('.') 
        NeoBundle 'tpope/vim-repeat'
        " Incrementing/decrementing numbers, dates and time formatted strings
        NeoBundle 'tpope/vim-speeddating'
        " Easy changing and insertion of surrounding delimiters (e.g. quotes,
        " parenthesis, etc.)
        NeoBundle 'tpope/vim-surround'
        " Sublime-text multi-cursors!
        NeoBundle 'terryma/vim-multiple-cursors'
        " f on steroids
        NeoBundle 'goldfeld/vim-seek'
        " Muh [] binds
        NeoBundle 'tpope/vim-unimpaired'

        " Custom modes
        NeoBundle 'kana/vim-submode'

        " Custom text objects
        NeoBundle 'kana/vim-textobj-user'
        " ae, ie
        NeoBundle 'kana/vim-textobj-entire' 
        " a/, i/, a?, i?
        NeoBundle 'kana/vim-textobj-lastpat' 
        " al, il
        NeoBundle 'kana/vim-textobj-line' 
        " ai, ii, aI, iI
        NeoBundle 'kana/vim-textobj-indent' 
        " a_, i_
        NeoBundle 'kana/vim-textobj-underscore' 
    " }
    " Remote resources {
        " 'a Git wrapper so awesome, it should be illegal'
        NeoBundle 'tpope/vim-fugitive'
        " Fetch remote files and packages
        NeoBundle 'mklabs/vim-fetch'
        " Async compiler plugins
        NeoBundle 'tpope/vim-dispatch'
        " Glorious gists!
        NeoBundle 'mattn/gist-vim'
    " }
    " Programming {
        " Awesome autocompletion
        NeoBundle 'Valloric/YouCompleteMe', {'build': {
                    \ 'mac': './install.sh --clang-completer',
                    \ 'unix': './install.sh --clang-completer' } }
        " Syntax checkers for a multitude of languages
        NeoBundle 'scrooloose/syntastic'
        " Running code inline for testing purposes
        NeoBundle 'notalex/vim-run-live'
        " Previewing markdown, rdoc, textile and html files in the browser
        NeoBundle 'spf13/vim-preview'

        if has("python")
            " Snippets system
            NeoBundle 'SirVer/ultisnips'
            " My snippets
            NeoBundle 'hlissner/vim-ultisnips-snippets'
        endif

        " Syntax specific {
            " PHP
            NeoBundleLazy 'StanAngeloff/php.vim',       {'autoload': {'filetypes': ['php', 'blade']}}
            NeoBundleLazy '2072/PHP-Indenting-for-VIm', {'autoload': {'filetypes': ['php', 'blade']}}
            NeoBundleLazy 'shawncplus/phpcomplete.vim', {'autoload': {'filetypes': ['php', 'blade']}}
            NeoBundleLazy 'stephpy/vim-phpdoc',         {'autoload': {'filetypes': ['php']}}
            NeoBundleLazy 'joonty/vim-phpunitqf',       {'autoload': {'filetypes': ['php']}}
            " PHP.laravel
            NeoBundleLazy 'johnhamelink/blade.vim',     {'autoload': {'filetypes': ['php', 'blade']}}
            " Python
            NeoBundleLazy 'indentpython.vim--nianyang', {'autoload': {'filetypes': ['python']}}
            NeoBundleLazy 'python_match.vim',           {'autoload': {'filetypes': ['python']}}
            " Javascript
            NeoBundleLazy 'pangloss/vim-javascript',    {'autoload': {'filetypes': ['javascript']}}
            NeoBundleLazy 'myhere/vim-nodejs-complete', {'autoload': {'filetypes': ['javascript']}}
            NeoBundleLazy 'kchmck/vim-coffee-script',   {'autoload': {'filetypes': ['javascript']}}
            " HTML
            NeoBundleLazy 'tristen/vim-sparkup',        {'autoload': {'filetypes': ['html', 'blade', 'twig', 'xml']}}
            NeoBundleLazy 'digitaltoad/vim-jade',       {'autoload': {'filetypes': ['jade']}}
            " CSS/SCSS/LESS
            NeoBundleLazy 'cakebaker/scss-syntax.vim',  {'autoload': {'filetypes': ['scss', 'sass']}}
            " Ruby
            NeoBundleLazy 'vim-ruby/vim-ruby',  {'autoload': {'filetypes': ['ruby']}}
            NeoBundleLazy 'tpope/vim-rails',    {'autoload': {'filetypes': ['ruby']}}
            " C/C++
            NeoBundleLazy 'octol/vim-cpp-enhanced-highlight',   {'autoload': {'filetypes': ['cpp']}}
            " Go
            NeoBundleLazy 'jnwhiteh/vim-golang', {'autoload': {'filetypes': ['go']}}
            " Other
            NeoBundleLazy 'spf13/vim-markdown', {'autoload': {'filetypes': ['markdown']}}
            NeoBundleLazy 'rdolgushin/PlantUML-Vim', {'autoload': {'filetypes': ['plantuml']}}
        " }
    " }
" }

" Settings {
    " Ack {
        if executable('ag')
            let g:ackprg = 'ag --nogroup --nocolor --column'
        elseif executable('ack-grep')
            let g:ackprg = "ack-grep -H --nocolor --nogroup --column"
        endif
    " }
    " Airline {
        let g:airline_left_sep=""
        let g:airline_right_sep=""
        let g:airline_enable_branch=1
        let g:airline_enable_prefix=1
        let g:airline_linecolumn_prefix = '␤ '
        let g:airline_paste_symbol = 'ρ'
        let g:airline_mode_map = {'n':'N', 'i':'I', 'R':'R', 'v':'V', 'V':'V-', 'c':'CMD', '':'V¤'}
        let g:airline_section_x = "%{strlen(&fenc)>0?&fenc:''}"
        let g:airline_section_y = "%{strlen(&filetype)>0?&filetype:''}"
    " }
    " BufferLine {
        let g:bufferline_echo = 0
        let g:bufferline_show_bufnr = 0
        let g:bufferline_rotate = 3
    " }
    " Ctrlp {
        let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'line', 'funky']
        let g:ctrlp_max_height = 15
        let g:ctrlp_cache_dir = "~/.vim/tmp/ctrlp"
        let g:ctrlp_working_path_mode = 0
        let g:ctrlp_custom_ignore = {
                    \ 'dir':  '\.git$\|\.hg$\|\.svn|\.settings$',
                    \ 'file': '\.exe$\|\.so$\|\.dll|\.sass\-cache|\.classpath|\.project$' }
        let g:ctrlp_user_command = {
                    \ 'types': {
                    \   ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                    \   ['.hg', 'hg --cwd %s locate -I']
                    \ },
                    \ 'fallback': 'ag %s -l --nocolor -g ""'
                \ }
    " }
    " delimitMate {
        let g:delimitMate_expand_cr = 1
        let g:delimitMate_expand_space = 1
    " }
    " GitGutter {
        let g:gitgutter_eager = 0
    " }
    " NERDTree {
        let NERDTreeMinimalUI=1
        let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git$', '\.hg', '\.svn', '\.bzr', '\.settings', '\.project', '\.DS_Store']
        let NERDTreeQuitOnOpen=0
        let NERDTreeShowBookmarks=0
        let NERDTreeShowHidden=1
        let NERDTreeAutoDeleteBuffer=1
    " }
    " PlantUML {
        let g:plantuml_executable_script = 'java -jar plantuml.jar'
    " }
    " SparkUp {
        " Enable zen-coding in other html-based filetypes
        au FileType blade,twig,xml so ~/.vim/bundle/vim-sparkup/ftplugin/html/sparkup.vim
    " }
    " Syntastic {
        let g:syntastic_enable_highlighting = 0
        let g:syntastic_auto_loc_list=1
        let g:syntastic_quiet_warnings=1
        let g:syntastic_phpcs_disable=1
        let g:syntastic_echo_current_error=0
    " }
    " TComment {
        let g:tcomment_types = {}
        let g:tcomment_types['blade'] = '{-- %s --}'
        let g:tcomment_types['twig'] = '{# %s #}'
    " }
    " UltiSnips {
        " Ignore the default snippets so I (and others) can define their own
        let g:UltiSnipsSnippetDirectories = ['snippets']
        let g:UltiSnipsExpandTrigger = "<Tab>"
    " }
    " Vim-indent-guides {
        let g:indent_guides_enable_on_vim_startup = 1
        let g:indent_guides_start_level           = 2
        let g:indent_guides_guide_size            = 1
        let g:indent_guides_color_change_percent  = 4
    " }
    " YouCompleteMe {
        let g:ycm_key_list_select_completion = ['<Down>']
        let g:ycm_key_list_previous_completion = ['<Up>']
        let g:ycm_autoclose_preview_window_after_insertion = 1
        let g:ycm_confirm_extra_conf = 0
    " }
" }

" vim:set foldmarker={,} foldlevel=0 foldmethod=marker:
