
" Plugins {
    " Appearance {
        " A personal favorite (colorscheme) :3
        Bundle 'tomasr/molokai'

        if has("gui_running")
            " A nicer status line that isn't as heavy as powerline
            Bundle 'bling/vim-airline'

            " Pretty indent indicators
            Bundle 'nathanaelkane/vim-indent-guides'
        endif
    " }

    " File search {
        " More powerful file searching
        Bundle 'mileszs/ack.vim'
    
        " Command-T, Peepopen or Goto-anything, but for vim, written in VimL
        Bundle 'kien/ctrlp.vim'

        " Ctrlp extension for jumping to functions
        Bundle 'tacahiroy/ctrlp-funky'

        " A filetree navigator replacement for netrw
        Bundle 'scrooloose/nerdtree'
    " }

    " Editing {
        " Use tab for completion (works fine with ultisnip)
        Bundle 'ervandew/supertab'

        " Improved % and hopping delimiters (can now be 1+ character)
        Bundle 'matchit.zip'

        " Auto-closes delimiters like (),{},[],etc.
        Bundle 'Raimondi/delimitMate'

        " Keeps track of everything that's yanked
        Bundle 'YankRing.vim'

        " Clean way to close buffers without altering window layout
        Bundle 'bufkill.vim'

        " For aligning text
        Bundle 'godlygeek/tabular'

        " Comment out code with native comment syntax
        Bundle 'tomtom/tcomment_vim'

        " Auto-place code blocks for languages like ruby or viml
        Bundle 'tpope/vim-endwise'

        " Offers some plugins better compatibility with repeat ('.') 
        Bundle 'tpope/vim-repeat'

        " Incrementing/decrementing numbers, dates and time formatted strings
        Bundle 'tpope/vim-speeddating'

        " Easy changing and insertion of surrounding delimiters (e.g. quotes,
        " parenthesis, etc.)
        Bundle 'tpope/vim-surround'

        " Opens the OS color picker on demand
        Bundle 'PickAColor.vim'

        " Sublime-text multi-cursors!
        Bundle 'terryma/vim-multiple-cursors'

        " f on steroids
        Bundle 'goldfeld/vim-seek'

        " Muh [] binds
        Bundle 'tpope/vim-unimpaired'
    " }
    
    " Remote resources {
        " 'a Git wrapper so awesome, it should be illegal'
        Bundle 'tpope/vim-fugitive'

        " Fetch remote files and packages
        Bundle 'mklabs/vim-fetch'

        " Async compiler plugins
        Bundle 'tpope/vim-dispatch'
    " }

    " Programming {
        " Syntax checkers for a multitude of languages
        Bundle 'scrooloose/syntastic'

        " Running code inline for testing purposes
        Bundle 'notalex/vim-run-live'

        " Previewing markdown, rdoc, textile and html files in the browser
        Bundle 'spf13/vim-preview'

        if has("python")
            " Snippets system
            Bundle 'SirVer/ultisnips'

            " My snippets
            Bundle 'hlissner/vim-ultisnips-snippets'
        endif

        " Syntax specific {
            " PHP
            Bundle 'StanAngeloff/php.vim'
            Bundle '2072/PHP-Indenting-for-VIm'
            Bundle 'shawncplus/phpcomplete.vim'
            Bundle 'stephpy/vim-phpdoc'
            Bundle 'joonty/vim-phpunitqf'
            " PHP.laravel
            Bundle 'johnhamelink/blade.vim'
            " Python
            Bundle 'davidhalter/jedi-vim'
            Bundle 'indentpython.vim--nianyang'
            Bundle 'klen/python-mode'
            Bundle 'python_match.vim'
            " Javascript
            Bundle 'pangloss/vim-javascript'
            Bundle 'myhere/vim-nodejs-complete'
            Bundle 'kchmck/vim-coffee-script'
            " HTML
            Bundle 'tristen/vim-sparkup'
            Bundle 'digitaltoad/vim-jade'
            " CSS/SCSS/LESS
            Bundle 'cakebaker/scss-syntax.vim'
            " Ruby
            Bundle 'vim-ruby/vim-ruby'
            Bundle 'tpope/vim-rails'
            " C/C++
            if substitute(system("uname -s"), '\n', '', '') ==# "Darwin"
                Bundle 'Rip-Rip/clang_complete'
            endif
            Bundle 'octol/vim-cpp-enhanced-highlight'
            " C# (For Mono on mac)
            Bundle 'nosami/Omnisharp'
            " Go
            Bundle 'jnwhiteh/vim-golang'
            " Other
            Bundle 'spf13/vim-markdown'
            Bundle 'rdolgushin/PlantUML-Vim'
        " }
    " }
" }

" Settings {
    " Ack {
        if executable('ack-grep')
            let g:ackprg = "ack-grep -H --nocolor --nogroup --column"
        elseif executable('ag')
            let g:ackprg = 'ag --nogroup --nocolor --column'
        endif
    " }

    " Airline {
        let g:airline_left_sep=""
        let g:airline_right_sep=""
        let g:airline_enable_fugitive=1
        let g:airline_enable_syntastic=1
        let g:airline_theme='badwolf'
    " }

    " Clang {
        let b:clang_user_options = '-std=c++11'
        let g:clang_complete_auto = 0
    " }

    " Ctrlp {
        let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'line', 'changes', 'funky']
        let g:ctrlp_max_height = 12
        let g:ctrlp_cache_dir = "~/.vim/tmp/ctrip"
        let g:ctrlp_working_path_mode = 0
        let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.svn|\.settings$',
            \ 'file': '\.exe$\|\.so$\|\.dll|\.sass\-cache|\.classpath|\.project$' }
        let g:ctrlp_user_command = {
            \ 'types': {
                \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others']
            \ },
            \ 'fallback': 'find %s -type f'
        \ }
    " }

    " delimitMate {
        let g:delimitMate_expand_cr = 1
        let g:delimitMate_expand_space = 1
    " }

    " EasyTags {
        let g:easytags_cmd = 'ctags'
        let g:easytags_by_filetype = "~/.vim/tmp/tags"
        let g:easytags_updatetime_autodisable = 1
    " }

    " NERDTree {
        let NERDTreeMinimalUI=1

        let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git$', '\.hg', '\.svn', '\.bzr', '\.settings', '\.project', '\.DS_Store']
        let NERDTreeQuitOnOpen=0
        let NERDTreeShowBookmarks=0
        let NERDTreeShowHidden=1
        let NERDTreeAutoDeleteBuffer=1
    " }

    " PlantUML {
        let g:plantuml_executable_script = 'java -jar ~/Dropbox/dev/bin/plantuml.jar'
    " }

    " PythonMode {
        let g:pymode_run = 0
        let g:pymode_lint_checker = 'pyflakes'

        if !has('python')
            let g:pymode = 1
        endif
    " }

    " SparkUp {
        " Enable zen-coding in other html-based filetypes
        au FileType blade,twig,xml so ~/.vim/bundle/vim-sparkup/ftplugin/html/sparkup.vim
    " }

    " SuperTab {
        let g:SuperTabDefaultCompletionType = "<c-n>"
    " }

    " Syntastic {
        let g:syntastic_enable_highlighting = 0
        let g:syntastic_auto_loc_list=1
        let g:syntastic_quiet_warnings=1
        let g:syntastic_phpcs_disable=1
        let g:syntastic_echo_current_error=0
    " }

    " TComment {
        let g:tcomment_types = {}
        let g:tcomment_types['blade'] = '{-- %s --}'
        let g:tcomment_types['twig'] = '{# %s #}'
    " }

    " UltiSnips {
        " Ignore the default snippets so I (and others) can define their own
        let g:UltiSnipsSnippetDirectories = ['snippets']
    " }

    " Vim-indent-guides {
        let g:indent_guides_enable_on_vim_startup = 1
        let g:indent_guides_start_level           = 2
        let g:indent_guides_guide_size            = 1
        " let g:indent_guides_auto_colors           = 1
        let g:indent_guides_color_change_percent  = 4
    " }
    
    " YankRing {
        let g:yankring_history_dir = '~/.vim/tmp/yankring'
    " }

" }

" vim:set foldmarker={,} foldlevel=0 foldmethod=marker:
