
" Plugins {
    " Appearance {
        " A personal favorite colorscheme :3
        NeoBundle 'tomasr/molokai'
        " A nicer status line that isn't as heavy as powerline
        NeoBundle 'bling/vim-airline'
        NeoBundle 'zhaocai/linepower.vim'
        NeoBundle 'bling/vim-bufferline'
        " Pretty indent indicators
        NeoBundle 'nathanaelkane/vim-indent-guides'
    " }
    " File search {
        NeoBundle 'Shougo/vimproc', { 'build' : {
                    \     'windows' : 'make -f make_mingw32.mak',
                    \     'cygwin' : 'make -f make_cygwin.mak',
                    \     'mac' : 'make -f make_mac.mak',
                    \     'unix' : 'make -f make_unix.mak' }, }
        " More powerful file searching
        if executable('ag')
            NeoBundle 'rking/ag.vim'
        elseif executable('ack')
            NeoBundle 'mileszs/ack.vim'
        endif
        " Command-T, Peepopen or Goto-anything, but for vim, written in VimL
        NeoBundle 'kien/ctrlp.vim'
        " Ctrlp extension for jumping to functions
        NeoBundle 'tacahiroy/ctrlp-funky'
        " A filetree navigator replacement for netrw
        NeoBundle 'scrooloose/nerdtree'

        NeoBundleLazy 'Shougo/unite.vim', {'autoload':{'commands':'Unite', 'insert': 1}} 
        " {
            let bundle = neobundle#get('unite.vim')
            function! bundle.hooks.on_source(bundle)
                call unite#filters#matcher_default#use(['matcher_fuzzy'])
                call unite#filters#sorter_default#use(['sorter_rank'])
                call unite#set_profile('files', 'smartcase', 1)
                call unite#custom#source('line,outline','matchers','matcher_fuzzy')
            endfunction

            let g:unite_data_directory='~/.vim/tmp/unite'
            let g:unite_enable_start_insert=1
            let g:unite_source_history_yank_enable=1
            let g:unite_source_rec_max_cache_files=5000
            let g:unite_enable_use_short_source_names=1
            let g:unite_prompt='» '
            let g:unite_split_rule='botright'

            if executable('ag')
                let g:unite_source_grep_command='ag'
                let g:unite_source_grep_default_opts='--nocolor --nogroup --hidden'
                let g:unite_source_grep_recursive_opt=''
            elseif executable('ack')
                let g:unite_source_grep_command='ack'
                let g:unite_source_grep_default_opts='--no-heading --no-color -a'
                let g:unite_source_grep_recursive_opt=''
            endif

            function! s:unite_settings()
                let b:SuperTabDisabled=1
                nmap <buffer> Q <plug>(unite_exit)
                nmap <buffer> <esc> <plug>(unite_exit)
                imap <buffer> <esc> <plug>(unite_exit)
            endfunction
            autocmd FileType unite call s:unite_settings()

            nmap <space> [unite]
            nnoremap [unite] <nop>

            nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize -buffer-name=files file_rec/async<cr><c-u>
            nnoremap <silent> [unite]y :<C-u>Unite -buffer-name=yanks history/yank<cr>
            nnoremap <silent> [unite]l :<C-u>Unite -auto-resize -buffer-name=line line<cr>
            nnoremap <silent> [unite]b :<C-u>Unite -auto-resize -buffer-name=buffers buffer<cr>
            nnoremap <silent> [unite]/ :<C-u>Unite -auto-resize -buffer-name=search grep:.<cr>
            nnoremap <silent> [unite]m :<C-u>Unite -auto-resize -buffer-name=mappings mapping<cr>
            nnoremap <silent> [unite], :<C-u>Unite -auto-resize -toggle -buffer-name=mru file_mru<cr>
            nnoremap <silent> [unite]s :<C-u>Unite -quick-match buffer<cr>

            NeoBundleLazy 'Shougo/unite-outline', {'autoload':{'unite_sources':'outline'}} 
            nnoremap <silent> [unite]o :<C-u>Unite -auto-resize -buffer-name=outline outline<cr>
        " }
    " }
    " Editing {
        " Visual git diffs in the gutter
        NeoBundle 'airblade/vim-gitgutter'
        " Use tab for completion (works fine with ultisnip)
        NeoBundle 'ervandew/supertab'
        " Improved % and hopping delimiters (can now be 1+ character)
        NeoBundle 'matchit.zip'
        " Auto-closes delimiters like (),{},[],etc.
        NeoBundle 'Raimondi/delimitMate'
        " Keeps track of everything that's yanked
        NeoBundle 'YankRing.vim'
        " Clean way to close buffers without altering window layout
        NeoBundle 'bufkill.vim'
        " For aligning text
        NeoBundle 'godlygeek/tabular'
        " Comment out code with native comment syntax
        NeoBundle 'tomtom/tcomment_vim'
        " Auto-place code blocks for languages like ruby or viml
        NeoBundle 'tpope/vim-endwise'
        " Offers some plugins better compatibility with repeat ('.') 
        NeoBundle 'tpope/vim-repeat'
        " Incrementing/decrementing numbers, dates and time formatted strings
        NeoBundle 'tpope/vim-speeddating'
        " Easy changing and insertion of surrounding delimiters (e.g. quotes,
        " parenthesis, etc.)
        NeoBundle 'tpope/vim-surround'
        " Opens the OS color picker on demand
        NeoBundle 'PickAColor.vim'
        " Sublime-text multi-cursors!
        NeoBundle 'terryma/vim-multiple-cursors'
        " f on steroids
        NeoBundle 'goldfeld/vim-seek'
        " Muh [] binds
        NeoBundle 'tpope/vim-unimpaired'

        " Custom modes
        NeoBundle 'kana/vim-submode'

        " Custom text objects
        NeoBundle 'kana/vim-textobj-user'
        " ae, ie
        NeoBundle 'kana/vim-textobj-entire' 
        " a/, i/, a?, i?
        NeoBundle 'kana/vim-textobj-lastpat' 
        " al, il
        NeoBundle 'kana/vim-textobj-line' 
        " ai, ii, aI, iI
        NeoBundle 'kana/vim-textobj-indent' 
        " a_, i_
        NeoBundle 'kana/vim-textobj-underscore' 
    " }
    " Remote resources {
        " 'a Git wrapper so awesome, it should be illegal'
        NeoBundle 'tpope/vim-fugitive'
        " Fetch remote files and packages
        NeoBundle 'mklabs/vim-fetch'
        " Async compiler plugins
        NeoBundle 'tpope/vim-dispatch'
        " Glorious gists!
        NeoBundle 'mattn/gist-vim'
    " }
    " Programming {
        " Syntax checkers for a multitude of languages
        NeoBundle 'scrooloose/syntastic'
        " Running code inline for testing purposes
        NeoBundle 'notalex/vim-run-live'
        " Previewing markdown, rdoc, textile and html files in the browser
        NeoBundle 'spf13/vim-preview'

        if has("python")
            " Snippets system
            NeoBundle 'SirVer/ultisnips'
            " My snippets
            NeoBundle 'hlissner/vim-ultisnips-snippets'
        endif

        " Syntax specific {
            " PHP
            NeoBundleLazy 'StanAngeloff/php.vim',       {'autoload': {'filetypes': ['php', 'blade']}}
            NeoBundleLazy '2072/PHP-Indenting-for-VIm', {'autoload': {'filetypes': ['php', 'blade']}}
            NeoBundleLazy 'shawncplus/phpcomplete.vim', {'autoload': {'filetypes': ['php', 'blade']}}
            NeoBundleLazy 'stephpy/vim-phpdoc',         {'autoload': {'filetypes': ['php']}}
            NeoBundleLazy 'joonty/vim-phpunitqf',       {'autoload': {'filetypes': ['php']}}
            " PHP.laravel
            NeoBundleLazy 'johnhamelink/blade.vim',     {'autoload': {'filetypes': ['php', 'blade']}}
            " Python
            NeoBundleLazy 'davidhalter/jedi-vim',       {'autoload': {'filetypes': ['python']}}
            NeoBundleLazy 'indentpython.vim--nianyang', {'autoload': {'filetypes': ['python']}}
            NeoBundleLazy 'klen/python-mode',           {'autoload': {'filetypes': ['python']}}
            NeoBundleLazy 'python_match.vim',           {'autoload': {'filetypes': ['python']}}
            " Javascript
            NeoBundleLazy 'pangloss/vim-javascript',    {'autoload': {'filetypes': ['javascript']}}
            NeoBundleLazy 'myhere/vim-nodejs-complete', {'autoload': {'filetypes': ['javascript']}}
            NeoBundleLazy 'kchmck/vim-coffee-script',   {'autoload': {'filetypes': ['javascript']}}
            " HTML
            NeoBundleLazy 'tristen/vim-sparkup',        {'autoload': {'filetypes': ['html', 'blade', 'twig', 'xml']}}
            NeoBundleLazy 'digitaltoad/vim-jade',       {'autoload': {'filetypes': ['jade']}}
            " CSS/SCSS/LESS
            NeoBundleLazy 'cakebaker/scss-syntax.vim',  {'autoload': {'filetypes': ['scss', 'sass']}}
            " Ruby
            NeoBundleLazy 'vim-ruby/vim-ruby',  {'autoload': {'filetypes': ['ruby']}}
            NeoBundleLazy 'tpope/vim-rails',    {'autoload': {'filetypes': ['ruby']}}
            " C/C++
            NeoBundleLazy 'Rip-Rip/clang_complete',             {'autoload': {'filetypes': ['cpp']}}
            NeoBundleLazy 'octol/vim-cpp-enhanced-highlight',   {'autoload': {'filetypes': ['cpp']}}
            " C# (For Mono on mac)
            NeoBundleLazy 'nosami/Omnisharp', {'autoload': {'filetypes': ['cs', 'cs_omnisharp']}}
            " Go
            NeoBundleLazy 'jnwhiteh/vim-golang', {'autoload': {'filetypes': ['go']}}
            " Other
            NeoBundleLazy 'spf13/vim-markdown', {'autoload': {'filetypes': ['markdown']}}
            NeoBundleLazy 'rdolgushin/PlantUML-Vim', {'autoload': {'filetypes': ['plantuml']}}
        " }
    " }
" }

" Settings {
    " Ack {
        if executable('ack-grep')
            let g:ackprg = "ack-grep -H --nocolor --nogroup --column"
        elseif executable('ag')
            let g:ackprg = 'ag --nogroup --nocolor --column'
        endif
    " }
    " Airline {
        let g:airline_left_sep=""
        let g:airline_right_sep=""
        let g:airline_enable_branch=1
        let g:airline_enable_prefix=1
    " }
    " Clang {
        let b:clang_user_options = '-std=c++11'
        let g:clang_complete_auto = 0
    " }
    " Ctrlp {
        let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'line', 'changes', 'funky']
        let g:ctrlp_max_height = 12
        let g:ctrlp_cache_dir = "~/.vim/tmp/ctrip"
        let g:ctrlp_working_path_mode = 0
        let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.svn|\.settings$',
            \ 'file': '\.exe$\|\.so$\|\.dll|\.sass\-cache|\.classpath|\.project$' }
        let g:ctrlp_user_command = {
            \ 'types': {
                \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others']
            \ },
        \ }
    " }
    " delimitMate {
        let g:delimitMate_expand_cr = 1
        let g:delimitMate_expand_space = 1
    " }
    " GitGutter {
        let g:gitgutter_eager = 0
    " }
    " NERDTree {
        let NERDTreeMinimalUI=1
        let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git$', '\.hg', '\.svn', '\.bzr', '\.settings', '\.project', '\.DS_Store', "^\.\.$", "^\.$"]
        let NERDTreeQuitOnOpen=0
        let NERDTreeShowBookmarks=0
        let NERDTreeShowHidden=1
        let NERDTreeAutoDeleteBuffer=1
    " }
    " PlantUML {
        let g:plantuml_executable_script = 'java -jar ~/Dropbox/dev/bin/plantuml.jar'
    " }
    " PythonMode {
        let g:pymode_run = 0
        let g:pymode_lint_checker = 'pyflakes'
        if !has('python') 
            let g:pymode = 1
        endif
    " }
    " SparkUp {
        " Enable zen-coding in other html-based filetypes
        au FileType blade,twig,xml so ~/.vim/bundle/vim-sparkup/ftplugin/html/sparkup.vim
    " }
    " SuperTab {
        let g:SuperTabDefaultCompletionType = "<c-n>"
        let g:SuperTabCrMapping = 0
    " }
    " Syntastic {
        let g:syntastic_enable_highlighting = 0
        let g:syntastic_auto_loc_list=1
        let g:syntastic_quiet_warnings=1
        let g:syntastic_phpcs_disable=1
        let g:syntastic_echo_current_error=0
    " }
    " TComment {
        let g:tcomment_types = {}
        let g:tcomment_types['blade'] = '{-- %s --}'
        let g:tcomment_types['twig'] = '{# %s #}'
    " }
    " UltiSnips {
        " Ignore the default snippets so I (and others) can define their own
        let g:UltiSnipsSnippetDirectories = ['snippets']
    " }
    " Vim-indent-guides {
        let g:indent_guides_enable_on_vim_startup = 1
        let g:indent_guides_start_level           = 2
        let g:indent_guides_guide_size            = 1
        let g:indent_guides_color_change_percent  = 4
    " }
    " YankRing {
        let g:yankring_history_dir = '~/.vim/tmp/yankring'
    " }
" }

" vim:set foldmarker={,} foldlevel=0 foldmethod=marker:
